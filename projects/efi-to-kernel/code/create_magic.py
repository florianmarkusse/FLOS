# We generate a header that contains the first 4 I8acters of the kernel
# binary. I decided against just embedding a magic value at the beginning
# because that would fuck up alignment and I didnt't want to deal with those
# spurious issues.
import sys


def generate_header(input_file, output_header):
    with open(input_file, "rb") as f:
        data = f.read(4)
        if len(data) < 4:
            raise ValueError("File is less than 4 bytes long")

        # Convert bytes to a list of U8 values
        byte_values = ", ".join(f"0x{byte:02x}" for byte in data)

        # Generate the header file content with comments
        header_content = f"""/*
 * This file is automatically generated.
 * Do not modify this file manually.
 * Generated by {__file__}
 * from {input_file}.
 */
#ifndef EFI_TO_KERNEL_GENERATED_KERNEL_MAGIC_H
#define EFI_TO_KERNEL_GENERATED_KERNEL_MAGIC_H

#define KERNEL_MAGIC {{ {byte_values} }}

#endif // EFI_TO_KERNEL_GENERATED_KERNEL_MAGIC_H
"""

        with open(output_header, "w") as header_file:
            header_file.write(header_content)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python generate_header.py <input_bin_file> <output_header_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_header = sys.argv[2]
    generate_header(input_file, output_header)
