diff --git a/projects/kernel/code/src/main.c b/projects/kernel/code/src/main.c
index 6352ed8..bfa9803 100644
--- a/projects/kernel/code/src/main.c
+++ b/projects/kernel/code/src/main.c
@@ -61,6 +61,6 @@ __attribute__((ms_abi, section("kernel-start"))) int kernelmain() {
     flo_printToScreen(FLO_STRING("Hello ther"), 0);
 
     while (1) {
-        ;
+	    __asm__ __volatile__ ("cli; hlt" : : "a" (0xdeadbeef));	// DEBUGGING
     }
 }
diff --git a/projects/kernel/code/util/src/log.c b/projects/kernel/code/util/src/log.c
index 2ad592c..14ee3e1 100644
--- a/projects/kernel/code/util/src/log.c
+++ b/projects/kernel/code/util/src/log.c
@@ -45,7 +45,7 @@ typedef struct {
 } __attribute__((packed)) psf2_t;
 
 extern psf2_t
-    glyphs asm("_binary__home_florian_Desktop_homegrown_projects_kernel_"
+    glyphs asm("_binary__home_queso_programming_homegrown_projects_kernel_"
                "code____resources_font_psf_start");
 
 #define PIXEL_MARGIN 20
diff --git a/projects/uefi/code/src/main.c b/projects/uefi/code/src/main.c
index 6d87504..506fcd8 100644
--- a/projects/uefi/code/src/main.c
+++ b/projects/uefi/code/src/main.c
@@ -262,26 +262,28 @@ void jumpIntoKernel(CEfiPhysicalAddress stackPointer) {
      * work done :-) */
 
     // disable PIC and NMI
-    __asm__ __volatile__(
-        "movb $0xFF, %%al; outb %%al, $0x21; outb %%al, $0xA1;" // disable PIC
-        "inb $0x70, %%al; orb $0x80, %%al; outb %%al, $0x70;"   // disable NMI
-        :
-        :
-        :);
+    // DEBUGGING
+    //__asm__ __volatile__(
+    //    "movb $0xFF, %%al; outb %%al, $0x21; outb %%al, $0xA1;" // disable PIC
+    //    "inb $0x70, %%al; orb $0x80, %%al; outb %%al, $0x70;"   // disable NMI
+    //    :
+    //    :
+    //    :);
 
     // enable SSE
-    __asm__ __volatile__("movl $0xC0000011, %%eax;"
-                         "movq %%rax, %%cr0;"
-                         "movq %%cr4, %%rax;"
-                         "orw $3 << 8, %%ax;"
-                         "mov %%rax, %%cr4"
-                         :);
+    // DEBUGGING
+    //__asm__ __volatile__("movl $0xC0000011, %%eax;"
+    //                     "movq %%rax, %%cr0;"
+    //                     "movq %%cr4, %%rax;"
+    //                     "orw $3 << 8, %%ax;"
+    //                     "mov %%rax, %%cr4"
+    //                     :);
 
     // set up paging
     __asm__ __volatile__("mov %0, %%rax;"
                          "mov %%rax, %%cr3"
                          :
-                         : "b"(globals.level4PageTable)
+                         : "gm"(globals.level4PageTable)
                          : "memory");
 
     //    pic_mask_all();
@@ -294,11 +296,12 @@ void jumpIntoKernel(CEfiPhysicalAddress stackPointer) {
         // get a valid stack for the core we're running on
         // "xorq %%rsp, %%rsp;"
         // pass control over
-        "movq %%rbx, %%rsp; movq %%rsp, %%rbp;;"
-        "pushq %0;"
-        "retq"
+        "movq %%rbx, %%rsp; movq %%rsp, %%rbp;;"
+        //"pushq %0;"
+        //"retq;"
+	"call *%%rax;"	// DEBUGGING
         :
-        : "a"(KERNEL_START)
+        : "a"(KERNEL_START), "b"(stackPointer)	// DEBUGGING
         : "memory");
 
     __builtin_unreachable();
@@ -475,7 +478,7 @@ void collectAndExitEfi() {
     RSDPResult rsdp = getRSDP();
     printDescriptionHeaders(rsdp);
 
-    error(u"Waiting here \r\n");
+    //error(u"Waiting here \r\n");
 
     globals.st->con_out->output_string(
         globals.st->con_out, u"Prepared and collected all necessary "
@@ -548,6 +551,9 @@ CEFICALL CEfiStatus efi_main(CEfiHandle handle, CEfiSystemTable *systemtable) {
             printNumber(iterator->number_of_pages, 16);
             globals.st->con_out->output_string(globals.st->con_out, u"\r\n");
         }
+
+	// DEBUGGING: Identity map EFI memory for descriptor
+	mapMemoryAt(iterator->physical_start, iterator->physical_start, iterator->number_of_pages * PAGE_SIZE);
     }
 
     globals.st->con_out->output_string(globals.st->con_out,
@@ -557,6 +563,14 @@ CEFICALL CEfiStatus efi_main(CEfiHandle handle, CEfiSystemTable *systemtable) {
     mapMemoryAt((CEfiU64)kernelContent.buf, KERNEL_START,
                 (CEfiU32)kernelContent.len);
 
+    // DEBUGGING: Identity map framebuffer
+    CEfiGuid gop_guid = C_EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID;
+    CEfiGraphicsOutputProtocol *gop = C_EFI_NULL;
+    CEfiStatus status = globals.st->boot_services->locate_protocol(
+        &gop_guid, C_EFI_NULL, (void **)&gop);
+
+    mapMemoryAt(gop->mode->frameBufferBase, gop->mode->frameBufferBase, gop->mode->frameBufferSize);
+
     globals.st->con_out->output_string(
         globals.st->con_out,
         u"Going to collect necessary info, then exit bootservices...\r\n");
diff --git a/projects/uefi/code/src/memory/boot-functions.c b/projects/uefi/code/src/memory/boot-functions.c
index 234d00b..a160eb0 100644
--- a/projects/uefi/code/src/memory/boot-functions.c
+++ b/projects/uefi/code/src/memory/boot-functions.c
@@ -56,10 +56,11 @@ void mapMemoryAt(CEfiU64 phys, CEfiU64 virt, CEfiU64 size) {
             *pageEntry =
                 // TODO: Remove WRITE_THROUGH once figured out what is necessary
                 // for firmware to work.
-                phys | (PAGE_PRESENT | PAGE_WRITABLE | PAGE_WRITE_THROUGH);
-        } else {
-            error(u"This should not happen!\r\n");
-        }
+                //phys | (PAGE_PRESENT | PAGE_WRITABLE | PAGE_WRITE_THROUGH);	// DEBUGGING
+                phys | (PAGE_PRESENT | PAGE_WRITABLE);
+        } //else {
+            //error(u"This should not happen!\r\n");
+        //}
     }
 }

